import warningswarnings.filterwarnings("ignore")import pandas as pdimport matplotlib.pyplot as pltimport numpy as npimport randomimport timeimport osimport numpy.random as rngfrom IPython.display import clear_outputfrom math import pifrom math import sinfrom math import cosfrom math import sqrtvaluesOfN=[10,50,100,500] + [1000*k for k in range(0,1001,50)]valuesOfN.remove(0)def throwing_darts(numberOfDarts=50):        """        Simulation of "numberOfDarts" darts being thrown        """        points=np.random.rand(numberOfDarts,2)-0.5        distance_from_center=np.sqrt((points**2).sum(axis=1))        numberOfDartsInsideCircle=np.sum(np.array(list(map( lambda x : 1 if x<0.5 else 0 ,  distance_from_center ))))        return 4*numberOfDartsInsideCircle/numberOfDartsdef monitoring_evolution_darts(valuesOfN,figure="Proba"):    """    Monitoring the evolution of the ratio : 4 * number of darts that landed on the circle / total number of darts    by increasing the number of darts and visualising if that ratio approches pi    """            pi_values = [pi for i in range(len(valuesOfN))]    listOfProba = np.array(list(map(throwing_darts,valuesOfN)))    zero_values = [0 for i in range(len(valuesOfN))]            ###############    fig,axp=plt.subplots(figsize=(15,10))    axp.set_xlabel("Number of Darts")    if figure=="Proba":        axp.plot(valuesOfN, pi_values,linestyle='--',label='Value of Pi')        axp.plot(valuesOfN, listOfProba,label='Approximation')        axp.set_ylabel("Approximation vs Pi")    elif figure=="Relative Error":        axp.plot(valuesOfN, np.absolute ((pi_values-listOfProba)/pi_values),label='Relative Error')        axp.plot(valuesOfN, zero_values,linestyle='--',label='Value of 0')    axp.legend(loc="upper right")    axp.locator_params(nbins = 20)    df=pd.DataFrame(listOfProba,valuesOfN)    df.reset_index(inplace=True)    df.rename(columns={'index' : 'Value of N', 0 : 'Approximation'},inplace=True)    plt.xscale(value='log')    ##############        return dfdef generate_figure(numberOfDarts=50):    """    Generating a figure containing a square with a surface equaling to 1    inside of which there is a circle of pi/4 surface    In our context, this graph is the aiming target of the darts    """    Sq = np.linspace(0,1,100)    cst = np.array([1 for i in range(100)])    fig,ax=plt.subplots(figsize=(10,10))    ax.plot(Sq,cst,color='black')    ax.plot(cst,Sq,color='black')    ax.plot(Sq,1-cst,color='black')    ax.plot(1-cst,Sq,color='black')    ax.add_patch(plt.Circle((0.5,0.5),0.5))    points=np.random.rand(numberOfDarts,2)    for x in points:        ax.scatter([x[0]],[x[1]],color='red',marker='x',zorder=2)    return axif __name__ == "__main__":     #df1=monitoring_evolution_darts(valuesOfN , "Relative Error")    df1=monitoring_evolution_darts(valuesOfN )    #generate_figure()